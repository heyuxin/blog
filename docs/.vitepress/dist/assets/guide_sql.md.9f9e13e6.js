import{o as n,c as s,a}from"./app.b8a24ffe.js";const p='{"title":"","description":"","frontmatter":{},"relativePath":"guide/sql.md","lastUpdated":1624288015984}',e={},t=a('<p>结构化查询语言(SQL)是一个ISO标准语言，用于创建和管理数据库。</p><div class="language-sql"><pre><code>\n<span class="token comment">-- 注释以两个连字符开始。命令以分号结束。</span>\n\n<span class="token comment">-- SQL关键字大小写不敏感。在下文的示例命令中关键字大写，</span>\n<span class="token comment">-- 因为大写更容易区分数据库、表和列名。</span>\n\n<span class="token comment">-- 创建和删除一个数据库。数据库名和表名是大小写敏感的。</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> someDatabase<span class="token punctuation">;</span>\n<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> someDatabase<span class="token punctuation">;</span>\n\n<span class="token comment">-- 列出可用的数据库。</span>\n<span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 使用某个已经存在的数据库</span>\n<span class="token keyword">USE</span> employees<span class="token punctuation">;</span>\n\n<span class="token comment">-- 从当前的departments表，选择所有的行和列</span>\n<span class="token comment">-- 解释器的默认行为是将结果打印在屏幕上。</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> departments<span class="token punctuation">;</span>\n\n<span class="token comment">-- 检索departments表中所有的行，但只取dept_no和dept_name列。</span>\n<span class="token comment">-- 一条命令可以跨越多行</span>\n<span class="token keyword">SELECT</span> dept_no<span class="token punctuation">,</span>\n       dept_name <span class="token keyword">FROM</span> departments<span class="token punctuation">;</span>\n\n<span class="token comment">-- 检索departments表中所有的行，但是只输出5行。</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> departments <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 检索departments表中dept_name列包含子串&#39;en&#39;的行。</span>\n<span class="token keyword">SELECT</span> dept_name <span class="token keyword">FROM</span> departments <span class="token keyword">WHERE</span> dept_name <span class="token operator">LIKE</span> <span class="token string">&#39;%en%&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 检索departmnets表中所有dept_name列值为&#39;S&#39;开头并且&#39;S&#39;后接4个字符的行。</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> departments <span class="token keyword">WHERE</span> dept_name <span class="token operator">LIKE</span> <span class="token string">&#39;S____&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 检索title表中所有行，不显示重复的行。</span>\n<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> title <span class="token keyword">FROM</span> titles<span class="token punctuation">;</span>\n\n<span class="token comment">-- 和上面的查询相同，但是以title的值排序(大小写敏感)。</span>\n<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> title <span class="token keyword">FROM</span> titles <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> title<span class="token punctuation">;</span>\n\n<span class="token comment">-- 计算departments表的总行数。</span>\n<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> departments<span class="token punctuation">;</span>\n\n<span class="token comment">-- 计算departments表中dept_name列以&#39;en&#39;字段开头的行的数量。</span>\n<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> departments <span class="token keyword">WHERE</span> dept_name <span class="token operator">LIKE</span> <span class="token string">&#39;%en%&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 列出所有数据库中所有的表。不同实现通常提供各自的快捷命令</span>\n<span class="token comment">-- 来列出当前使用数据库的所有表。</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span><span class="token keyword">TABLES</span>\n<span class="token keyword">WHERE</span> TABLE_TYPE<span class="token operator">=</span><span class="token string">&#39;BASE TABLE&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 在当前使用的数据库中，创建一个名为tablename1的表，包含下</span>\n<span class="token comment">-- 述两列。许多其它选项可用于定制列，比如列的数据类型。</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tablename1 <span class="token punctuation">(</span>fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 向tablename1表插入一行数据。假设该表已经定义并且接受这些值。</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tablename1 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;Richard&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Mutt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 更新tablename1表中lname为&#39;Mutt&#39;的行fname的值改为&#39;John&#39;。</span>\n<span class="token keyword">UPDATE</span> tablename1 <span class="token keyword">SET</span> fname<span class="token operator">=</span><span class="token string">&#39;John&#39;</span> <span class="token keyword">WHERE</span> lname<span class="token operator">=</span><span class="token string">&#39;Mutt&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 删除tablename1表lname列以&#39;M&#39;开头的行。</span>\n<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tablename1 <span class="token keyword">WHERE</span> lname <span class="token operator">like</span> <span class="token string">&#39;M%&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 删除tablename1表的所有行，留下空表。</span>\n<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tablename1<span class="token punctuation">;</span>\n\n<span class="token comment">-- 删除整个tablename1表。</span>\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> tablename1<span class="token punctuation">;</span>\n</code></pre></div>',2);e.render=function(a,p,e,o,c,k){return n(),s("div",null,[t])};export default e;export{p as __pageData};
